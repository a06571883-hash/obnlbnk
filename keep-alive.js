
/**
 * –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π Keep-alive —Å–µ—Ä–≤–∏—Å –¥–ª—è Replit
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º 24/7 –±–µ–∑ –æ–ø–ª–∞—Ç—ã
 */

const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const KEEP_ALIVE_CONFIG = {
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–∏–Ω–≥–æ–≤ (3 –º–∏–Ω—É—Ç—ã)
  internalInterval: 3 * 60 * 1000,
  
  // –ü–æ—Ä—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  port: process.env.PORT || 5000,
  
  // URL –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  externalUrl: process.env.REPL_URL || `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`,
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  healthEndpoints: ['/api/rates', '/api/health', '/']
};

// –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤
let successCount = 0;
let errorCount = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
function internalPing() {
  const endpoint = KEEP_ALIVE_CONFIG.healthEndpoints[
    Math.floor(Math.random() * KEEP_ALIVE_CONFIG.healthEndpoints.length)
  ];
  
  const options = {
    hostname: '0.0.0.0',
    port: KEEP_ALIVE_CONFIG.port,
    path: endpoint,
    method: 'GET',
    timeout: 8000,
    headers: {
      'User-Agent': 'BNAL-Keep-Alive/1.0',
      'Cache-Control': 'no-cache'
    }
  };

  const req = http.request(options, (res) => {
    successCount++;
    console.log(`‚úÖ Keep-alive ping #${successCount}: ${res.statusCode} - ${endpoint}`);
    
    // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    res.on('data', () => {});
    res.on('end', () => {});
  });

  req.on('error', (err) => {
    errorCount++;
    console.log(`‚ö†Ô∏è Keep-alive error #${errorCount}: ${err.message}`);
  });

  req.on('timeout', () => {
    errorCount++;
    console.log(`‚è∞ Keep-alive timeout #${errorCount}: ${endpoint}`);
    req.destroy();
  });

  req.end();
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π health check endpoint
const server = http.createServer((req, res) => {
  if (req.url === '/health' || req.url === '/api/health') {
    res.writeHead(200, { 
      'Content-Type': 'application/json',
      'Cache-Control': 'no-cache'
    });
    res.end(JSON.stringify({
      status: 'alive',
      uptime: process.uptime(),
      pings: { success: successCount, errors: errorCount },
      timestamp: new Date().toISOString(),
      message: 'BNAL Bank server is running'
    }));
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Keep-alive service');
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ—Ä—Ç—É
const healthPort = 3001;
server.listen(healthPort, '0.0.0.0', () => {
  console.log(`üîÑ Keep-alive health check running on port ${healthPort}`);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∏–Ω–≥–∏
setInterval(internalPing, KEEP_ALIVE_CONFIG.internalInterval);

// –ü–µ—Ä–≤—ã–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
setTimeout(internalPing, 30000);

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
console.log('\nüÜì –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–°–¢–û–Ø–ù–ù–û–ô –†–ê–ë–û–¢–´:');
console.log('1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://uptimerobot.com (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)');
console.log('2. –î–æ–±–∞–≤—å—Ç–µ HTTP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è URL:');
console.log(`   ${KEEP_ALIVE_CONFIG.externalUrl}/health`);
console.log('3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 5 –º–∏–Ω—É—Ç');
console.log('4. –í–∞—à —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 24/7 –ë–ï–°–ü–õ–ê–¢–ù–û!');
console.log('\nüîÑ Keep-alive —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

module.exports = { internalPing, successCount, errorCount };
