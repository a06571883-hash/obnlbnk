import { ethers } from 'ethers';
import axios from 'axios';
import { validateCryptoAddress } from './crypto';

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const INFURA_API_KEY = process.env.INFURA_API_KEY;
const ALCHEMY_API_KEY = process.env.ALCHEMY_API_KEY;
const BLOCKDAEMON_API_KEY = process.env.BLOCKDAEMON_API_KEY;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
 * @returns true –µ—Å–ª–∏ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, false –µ—Å–ª–∏ –Ω–µ—Ç
 */
export function hasBlockchainApiKeys(): boolean {
  return Boolean(BLOCKDAEMON_API_KEY || INFURA_API_KEY || ALCHEMY_API_KEY);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç Ethereum –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ç–∏
 * @returns –ü—Ä–æ–≤–∞–π–¥–µ—Ä Ethereum
 */
function getEthereumProvider() {
  if (INFURA_API_KEY) {
    return new ethers.JsonRpcProvider(`https://mainnet.infura.io/v3/${INFURA_API_KEY}`);
  } else if (ALCHEMY_API_KEY) {
    return new ethers.JsonRpcProvider(`https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}`);
  } else {
    throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Ethereum');
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å Bitcoin-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ BlockDaemon API
 * @param address Bitcoin-–∞–¥—Ä–µ—Å
 * @returns Promise —Å –±–∞–ª–∞–Ω—Å–æ–º –≤ BTC
 */
export async function getBitcoinBalance(address: string): Promise<number> {
  try {
    if (!validateCryptoAddress(address, 'btc')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å: ${address}`);
    }

    if (!BLOCKDAEMON_API_KEY) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Bitcoin API');
    }

    const response = await axios.get(
      `https://svc.blockdaemon.com/bitcoin/mainnet/account/${address}`,
      {
        headers: {
          'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
          'Accept': 'application/json'
        }
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
    if (response.data && typeof response.data.balance === 'number') {
      // –ë–∞–ª–∞–Ω—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Å–∞—Ç–æ—à–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BTC (1 BTC = 100,000,000 satoshi)
      const balanceInBtc = response.data.balance / 100000000;
      console.log(`–ë–∞–ª–∞–Ω—Å BTC –∞–¥—Ä–µ—Å–∞ ${address}: ${balanceInBtc} BTC`);
      return balanceInBtc;
    } else {
      console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API:', response.data);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å BTC –∞–¥—Ä–µ—Å–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ BTC –∞–¥—Ä–µ—Å–∞ ${address}:`, error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å Ethereum-–∞–¥—Ä–µ—Å–∞
 * @param address Ethereum-–∞–¥—Ä–µ—Å
 * @returns Promise —Å –±–∞–ª–∞–Ω—Å–æ–º –≤ ETH
 */
export async function getEthereumBalance(address: string): Promise<number> {
  try {
    if (!validateCryptoAddress(address, 'eth')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Ethereum –∞–¥—Ä–µ—Å: ${address}`);
    }

    const provider = getEthereumProvider();
    const balanceWei = await provider.getBalance(address);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ Wei –≤ ETH (1 ETH = 10^18 Wei)
    const balanceEth = parseFloat(ethers.formatEther(balanceWei));
    
    console.log(`–ë–∞–ª–∞–Ω—Å ETH –∞–¥—Ä–µ—Å–∞ ${address}: ${balanceEth} ETH`);
    return balanceEth;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ ETH –∞–¥—Ä–µ—Å–∞ ${address}:`, error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Bitcoin —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫)
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
 */
export async function sendBitcoinTransaction(
  fromAddress: string,
  toAddress: string,
  amountBtc: number
): Promise<{ txId: string; status: string }> {
  try {
    if (!validateCryptoAddress(fromAddress, 'btc')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π Bitcoin –∞–¥—Ä–µ—Å: ${fromAddress}`);
    }
    
    if (!validateCryptoAddress(toAddress, 'btc')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π Bitcoin –∞–¥—Ä–µ—Å: ${toAddress}`);
    }

    if (!BLOCKDAEMON_API_KEY) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Bitcoin API');
    }

    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ ${amountBtc} BTC —Å ${fromAddress} –Ω–∞ ${toAddress}`);

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º –∫–æ—à–µ–ª—å–∫–æ–º
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    const fakeTxId = `btc_tx_${Date.now()}_${Math.floor(Math.random() * 1000000)}`;
    
    console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. TxID: ${fakeTxId}`);
    return { txId: fakeTxId, status: 'pending' };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Ethereum —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫)
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
 */
export async function sendEthereumTransaction(
  fromAddress: string,
  toAddress: string,
  amountEth: number
): Promise<{ txId: string; status: string }> {
  try {
    if (!validateCryptoAddress(fromAddress, 'eth')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π Ethereum –∞–¥—Ä–µ—Å: ${fromAddress}`);
    }
    
    if (!validateCryptoAddress(toAddress, 'eth')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π Ethereum –∞–¥—Ä–µ—Å: ${toAddress}`);
    }

    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ ${amountEth} ETH —Å ${fromAddress} –Ω–∞ ${toAddress}`);

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    const fakeTxId = `eth_tx_${Date.now()}_${Math.floor(Math.random() * 1000000)}`;
    
    console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. TxID: ${fakeTxId}`);
    return { txId: fakeTxId, status: 'pending' };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ TxID
 * @param txId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param cryptoType –¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ('btc' –∏–ª–∏ 'eth')
 * @returns –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export async function checkTransactionStatus(
  txId: string,
  cryptoType: 'btc' | 'eth'
): Promise<{ status: 'pending' | 'completed' | 'failed', confirmations?: number }> {
  try {
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${txId} (${cryptoType})`);
    
    if (cryptoType === 'btc') {
      if (!BLOCKDAEMON_API_KEY) {
        throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Bitcoin API');
      }
      
      // –ó–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ BlockDaemon API
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      const statuses = ['pending', 'completed'] as const;
      const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
      const confirmations = randomStatus === 'completed' ? Math.floor(Math.random() * 6) + 1 : 0;
      
      return { status: randomStatus, confirmations };
    } else if (cryptoType === 'eth') {
      const provider = getEthereumProvider();
      
      // –ó–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      const statuses = ['pending', 'completed'] as const;
      const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
      const confirmations = randomStatus === 'completed' ? Math.floor(Math.random() * 12) + 1 : 0;
      
      return { status: randomStatus, confirmations };
    } else {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: ${cryptoType}`);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${txId}:`, error);
    throw error;
  }
}

// –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
(() => {
  if (hasBlockchainApiKeys()) {
    console.log('üîë API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    if (BLOCKDAEMON_API_KEY) console.log('‚úì BlockDaemon API Key –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    if (INFURA_API_KEY) console.log('‚úì Infura API Key –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    if (ALCHEMY_API_KEY) console.log('‚úì Alchemy API Key –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    console.warn('‚ö†Ô∏è API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–∞–º–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏.');
  }
})();