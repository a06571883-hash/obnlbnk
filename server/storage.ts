import * as schema from "@shared/schema";
import { InsertCard, InsertTransaction, InsertUser, Transaction, User, Card, cards, exchangeRates, transactions, users } from "@shared/schema";
import { eq, sql, asc } from "drizzle-orm";
import { drizzle } from "drizzle-orm/postgres-js";
import express from "express";
import session from "express-session";
import { Store } from "express-session";
import postgres from "postgres";
import PGSession from "connect-pg-simple";
import { client, db } from "./db";
import { validateCryptoAddress } from "./utils/crypto";
import { hasBlockchainApiKeys, sendBitcoinTransaction, sendEthereumTransaction, checkTransactionStatus } from "./utils/blockchain";
import { BlockchainError } from "./utils/error-handler";

export interface IStorage {
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  getCardsByUserId(userId: number): Promise<Card[]>;
  createCard(card: Omit<Card, "id">): Promise<Card>;
  sessionStore: Store;
  getAllUsers(): Promise<User[]>;
  updateRegulatorBalance(userId: number, balance: string): Promise<void>;
  updateCardBalance(cardId: number, balance: string): Promise<void>;
  updateCardBtcBalance(cardId: number, balance: string): Promise<void>;
  updateCardEthBalance(cardId: number, balance: string): Promise<void>;
  getCardById(cardId: number): Promise<Card | undefined>;
  getCardByNumber(cardNumber: string): Promise<Card | undefined>;
  getTransactionsByCardId(cardId: number): Promise<Transaction[]>;
  createTransaction(transaction: Omit<Transaction, "id">, txDb?: any): Promise<Transaction>;
  transferMoney(fromCardId: number, toCardNumber: string, amount: number): Promise<{ success: boolean; error?: string; transaction?: Transaction }>;
  transferCrypto(fromCardId: number, recipientAddress: string, amount: number, cryptoType: 'btc' | 'eth'): Promise<{ success: boolean; error?: string; transaction?: Transaction }>;
  getLatestExchangeRates(): Promise<any | undefined>;
  updateExchangeRates(rates: { usdToUah: number; btcToUsd: number; ethToUsd: number }): Promise<any>;
  createNFTCollection(userId: number, name: string, description: string): Promise<any>;
  createNFT(data: Omit<any, "id">): Promise<any>;
  getNFTsByUserId(userId: number): Promise<any[]>;
  getNFTCollectionsByUserId(userId: number): Promise<any[]>;
  canGenerateNFT(userId: number): Promise<boolean>;
  updateUserNFTGeneration(userId: number): Promise<void>;
  getTransactionsByCardIds(cardIds: number[]): Promise<Transaction[]>;
  createDefaultCardsForUser(userId: number): Promise<void>;
  deleteUser(userId: number): Promise<void>;
}

export class DatabaseStorage implements IStorage {
  sessionStore: Store;

  constructor() {
    const PGSessionStore = PGSession(session);
    this.sessionStore = new PGSessionStore({
      conObject: {
        connectionString: process.env.DATABASE_URL,
        ssl: process.env.NODE_ENV === 'production',
      },
      tableName: 'session'
    } as any);
  }

  async getUser(id: number): Promise<User | undefined> {
    return this.withRetry(async () => {
      try {
        const [user] = await db.select().from(users).where(eq(users.id, id));
        return user;
      } catch (error) {
        console.error(`Error fetching user by ID ${id}:`, error);
        throw error;
      }
    }, 'Get User by ID');
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return this.withRetry(async () => {
      try {
        const [user] = await db.select().from(users).where(eq(users.username, username));
        return user;
      } catch (error) {
        console.error(`Error fetching user by username ${username}:`, error);
        throw error;
      }
    }, 'Get User by Username');
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    return this.withRetry(async () => {
      try {
        const [user] = await db.insert(users).values(insertUser).returning();
        return user;
      } catch (error) {
        console.error("Error creating user:", error);
        throw error;
      }
    }, 'Create User');
  }

  async getCardsByUserId(userId: number): Promise<Card[]> {
    return this.withRetry(async () => {
      try {
        const userCards = await db.select().from(cards).where(eq(cards.userId, userId)).orderBy(asc(cards.id));
        return userCards;
      } catch (error) {
        console.error(`Error fetching cards for user ${userId}:`, error);
        throw error;
      }
    }, 'Get Cards by User ID');
  }

  async createCard(card: Omit<Card, "id">): Promise<Card> {
    return this.withRetry(async () => {
      try {
        const [result] = await db.insert(cards).values(card).returning();
        return result;
      } catch (error) {
        console.error("Error creating card:", error);
        throw error;
      }
    }, 'Create Card');
  }

  async getAllUsers(): Promise<User[]> {
    return this.withRetry(async () => {
      try {
        return await db.select().from(users);
      } catch (error) {
        console.error("Error fetching all users:", error);
        throw error;
      }
    }, 'Get All Users');
  }

  async updateRegulatorBalance(userId: number, balance: string): Promise<void> {
    return this.withRetry(async () => {
      try {
        await db.update(users)
          .set({ regulator_balance: balance, updatedAt: new Date() })
          .where(eq(users.id, userId));
      } catch (error) {
        console.error(`Error updating regulator balance for user ${userId}:`, error);
        throw error;
      }
    }, 'Update Regulator Balance');
  }

  async updateCardBalance(cardId: number, balance: string): Promise<void> {
    return this.withRetry(async () => {
      try {
        await db.update(cards)
          .set({ balance: balance, updatedAt: new Date() })
          .where(eq(cards.id, cardId));
      } catch (error) {
        console.error(`Error updating balance for card ${cardId}:`, error);
        throw error;
      }
    }, 'Update Card Balance');
  }

  async updateCardBtcBalance(cardId: number, balance: string): Promise<void> {
    return this.withRetry(async () => {
      try {
        await db.update(cards)
          .set({ btcBalance: balance, updatedAt: new Date() })
          .where(eq(cards.id, cardId));
      } catch (error) {
        console.error(`Error updating BTC balance for card ${cardId}:`, error);
        throw error;
      }
    }, 'Update Card BTC Balance');
  }

  async updateCardEthBalance(cardId: number, balance: string): Promise<void> {
    return this.withRetry(async () => {
      try {
        await db.update(cards)
          .set({ ethBalance: balance, updatedAt: new Date() })
          .where(eq(cards.id, cardId));
      } catch (error) {
        console.error(`Error updating ETH balance for card ${cardId}:`, error);
        throw error;
      }
    }, 'Update Card ETH Balance');
  }

  async getCardById(cardId: number): Promise<Card | undefined> {
    return this.withRetry(async () => {
      try {
        const [card] = await db.select().from(cards).where(eq(cards.id, cardId));
        return card;
      } catch (error) {
        console.error(`Error fetching card by ID ${cardId}:`, error);
        throw error;
      }
    }, 'Get Card by ID');
  }

  async getCardByNumber(cardNumber: string): Promise<Card | undefined> {
    return this.withRetry(async () => {
      try {
        const [card] = await db.select().from(cards).where(eq(cards.number, cardNumber));
        return card;
      } catch (error) {
        console.error(`Error fetching card by number ${cardNumber}:`, error);
        throw error;
      }
    }, 'Get Card by Number');
  }

  async getTransactionsByCardId(cardId: number): Promise<Transaction[]> {
    return this.withRetry(async () => {
      try {
        return await db.select().from(transactions).where(
          sql`${transactions.fromCardId} = ${cardId} OR ${transactions.toCardId} = ${cardId}`
        ).orderBy(sql`${transactions.createdAt} DESC`);
      } catch (error) {
        console.error(`Error fetching transactions for card ${cardId}:`, error);
        throw error;
      }
    }, 'Get Transactions by Card ID');
  }

  async createTransaction(transaction: Omit<Transaction, "id">, txDb?: any): Promise<Transaction> {
    return this.withRetry(async () => {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const database = txDb || db;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        console.log(`üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å ${txDb ? '–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º txDb' : '–≥–ª–æ–±–∞–ª—å–Ω—ã–º db'}`);
        if (txDb) {
          console.log(`üìã txDb —Å–æ–¥–µ—Ä–∂–∏—Ç: ${Object.keys(txDb).join(', ')}`);
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
        const [maxIdResult] = await database.select({ maxId: sql`COALESCE(MAX(id), 0)` }).from(transactions);
        const nextId = Number(maxIdResult?.maxId || 0) + 1;

        console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å ID ${nextId}:`, transaction);
        
        const [result] = await database.insert(transactions).values({
          ...transaction,
          id: nextId,
          wallet: transaction.wallet || null,
          description: transaction.description || "",
          createdAt: new Date()
        }).returning();
        
        console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:`, result);
        return result;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, error);
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        if (error instanceof Error) {
          console.error(`üî¥ –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
          console.error(`üî¥ –°—Ç–µ–∫: ${error.stack}`);
        }
        
        throw error;
      }
    }, 'Create transaction');
  }

  async transferMoney(fromCardId: number, toCardNumber: string, amount: number): Promise<{ success: boolean; error?: string; transaction?: Transaction }> {
    return this.withTransaction(async () => {
      try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const [fromCard] = await db.select().from(cards).where(eq(cards.id, fromCardId));
        if (!fromCard) {
          throw new Error("–ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const [toCard] = await db.select().from(cards).where(eq(cards.number, toCardNumber));
        if (!toCard) {
          throw new Error("–ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç)
        if (fromCard.userId === toCard.userId && fromCard.type === toCard.type) {
          throw new Error("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞");
        }

        // –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const fromBalance = parseFloat(fromCard.balance);
        
        // –ö–æ–º–∏—Å—Å–∏—è
        const commission = amount * 0.01;
        const totalDebit = amount + commission;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if (fromBalance < totalDebit) {
          throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${fromBalance.toFixed(2)} ${fromCard.type.toUpperCase()}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount.toFixed(2)} + ${commission.toFixed(2)} –∫–æ–º–∏—Å—Å–∏—è = ${totalDebit.toFixed(2)} ${fromCard.type.toUpperCase()}`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        const [rates] = await db.select().from(exchangeRates).orderBy(sql`${exchangeRates.id} DESC`).limit(1);
        if (!rates) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç");
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await this.updateCardBalance(fromCard.id, (fromBalance - totalDebit).toFixed(2));

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let convertedAmount = amount;
        
        if (fromCard.type !== toCard.type) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å—ë –≤ USD –∫–∞–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –≤–∞–ª—é—Ç—É
          let amountInUsd;
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –≤–∞–ª—é—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ USD
          if (fromCard.type === 'uah') {
            amountInUsd = amount / parseFloat(rates.usdToUah);
          } else if (fromCard.type === 'usd') {
            amountInUsd = amount;
          } else if (fromCard.type === 'crypto') {
            amountInUsd = amount * parseFloat(rates.btcToUsd);
          }
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ USD –≤ –≤–∞–ª—é—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
          if (toCard.type === 'uah') {
            convertedAmount = amountInUsd! * parseFloat(rates.usdToUah);
          } else if (toCard.type === 'usd') {
            convertedAmount = amountInUsd!;
          } else if (toCard.type === 'crypto') {
            convertedAmount = amountInUsd! / parseFloat(rates.btcToUsd);
          }
        }

        // –ó–∞—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        const toBalance = parseFloat(toCard.balance);
        await this.updateCardBalance(toCard.id, (toBalance + convertedAmount).toFixed(2));

        // –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é —Ä–µ–≥—É–ª—è—Ç–æ—Ä—É
        const [regulator] = await db.select().from(users).where(eq(users.is_regulator, true));
        if (regulator) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ BTC
          let btcCommission;
          
          if (fromCard.type === 'usd') {
            btcCommission = commission / parseFloat(rates.btcToUsd);
          } else if (fromCard.type === 'uah') {
            const usdValue = commission / parseFloat(rates.usdToUah);
            btcCommission = usdValue / parseFloat(rates.btcToUsd);
          } else if (fromCard.type === 'crypto') {
            btcCommission = commission;
          } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–∞—Ä—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º usd –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            btcCommission = commission / parseFloat(rates.btcToUsd);
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
          const regulatorBalance = parseFloat(regulator.regulator_balance || '0');
          await this.updateRegulatorBalance(regulator.id, (regulatorBalance + btcCommission).toFixed(8));
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transaction = await this.createTransaction({
          fromCardId: fromCard.id,
          toCardId: toCard.id,
          amount: amount.toString(),
          convertedAmount: convertedAmount.toString(),
          type: 'transfer',
          status: 'completed',
          description: `–ü–µ—Ä–µ–≤–æ–¥ ${amount.toFixed(fromCard.type === 'crypto' ? 8 : 2)} ${fromCard.type.toUpperCase()} ‚Üí ${convertedAmount.toFixed(toCard.type === 'crypto' ? 8 : 2)} ${toCard.type.toUpperCase()} (–∫—É—Ä—Å: ${(convertedAmount / amount).toFixed(2)})`,
          fromCardNumber: fromCard.number,
          toCardNumber: toCard.number,
          wallet: null,
          createdAt: new Date()
        }, null);

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–æ–º–∏—Å—Å–∏–∏
        await this.createTransaction({
          fromCardId: fromCard.id,
          toCardId: regulator.id,
          amount: commission.toString(),
          convertedAmount: btcCommission.toString(),
          type: 'commission',
          status: 'completed',
          description: `–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ (${btcCommission.toFixed(8)} BTC)`,
          fromCardNumber: fromCard.number,
          toCardNumber: "REGULATOR",
          wallet: null,
          createdAt: new Date()
        }, null);

        return { success: true, transaction };
      } catch (error) {
        console.error("Transfer error:", error);
        throw error;
      }
    }, "Transfer Money Operation");
  }

  async transferCrypto(fromCardId: number, recipientAddress: string, amount: number, cryptoType: 'btc' | 'eth'): Promise<{ success: boolean; error?: string; transaction?: Transaction }> {
    // –£–±–∏—Ä–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å parsers
    try {
      console.log(`üîÑ –ù–∞—á–∞–ª–æ –∫—Ä–∏–ø—Ç–æ-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ë–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò: ${fromCardId} ‚Üí ${recipientAddress} (${amount} ${cryptoType})`);
    
      const fromCard = await this.getCardById(fromCardId);
      if (!fromCard) {
        throw new Error("–ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      }

        const rates = await this.getLatestExchangeRates();
        if (!rates) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç");
        }

        // –ò—â–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        let toCard;
        if (cryptoType === 'btc') {
          // –î–ª—è BTC –Ω–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç—É –ø–æ BTC-–∞–¥—Ä–µ—Å—É –∏–ª–∏ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã
          const [btcCard] = await db.select().from(cards).where(eq(cards.btcAddress, recipientAddress));
          toCard = btcCard || await this.getCardByNumber(recipientAddress);
          console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ BTC-–∞–¥—Ä–µ—Å—É ${recipientAddress}:`, toCard);
        } else if (cryptoType === 'eth') {
          // –î–ª—è ETH –Ω–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç—É –ø–æ ETH-–∞–¥—Ä–µ—Å—É –∏–ª–∏ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã
          const [ethCard] = await db.select().from(cards).where(eq(cards.ethAddress, recipientAddress));
          toCard = ethCard || await this.getCardByNumber(recipientAddress);
          console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ ETH-–∞–¥—Ä–µ—Å—É ${recipientAddress}:`, toCard);
        } else {
          toCard = await this.getCardByNumber(recipientAddress);
          console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É ${recipientAddress}:`, toCard);
        }

        const [regulator] = await db.select().from(users).where(eq(users.is_regulator, true));
        if (!regulator) {
          throw new Error("–†–µ–≥—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ");
        }

        // Calculate amounts
        const commission = amount * 0.01;
        const totalDebit = amount + commission;

        let btcToSend: number;
        let btcCommission: number;

        if (fromCard.type === 'crypto') {
          if (cryptoType === 'btc') {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ BTC
            btcToSend = amount;
            btcCommission = commission;

            const cryptoBalance = parseFloat(fromCard.btcBalance || '0');
            if (cryptoBalance < totalDebit) {
              throw new Error(
                `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC. –î–æ—Å—Ç—É–ø–Ω–æ: ${cryptoBalance.toFixed(8)} BTC, ` +
                `—Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount.toFixed(8)} + ${commission.toFixed(8)} –∫–æ–º–∏—Å—Å–∏—è = ${totalDebit.toFixed(8)} BTC`
              );
            }

            // –°–Ω–∏–º–∞–µ–º BTC —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            await this.updateCardBtcBalance(fromCard.id, (cryptoBalance - totalDebit).toFixed(8));
            console.log(`–°–Ω—è—Ç–æ —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${totalDebit.toFixed(8)} BTC`);
          } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ ETH
            const ethToSend = amount;
            const ethCommission = commission;
            btcToSend = amount * (parseFloat(rates.ethToUsd) / parseFloat(rates.btcToUsd)); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ETH –≤ BTC –¥–ª—è —É—á–µ—Ç–∞
            btcCommission = commission * (parseFloat(rates.ethToUsd) / parseFloat(rates.btcToUsd)); // –ö–æ–º–∏—Å—Å–∏—è –≤ BTC —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ

            const ethBalance = parseFloat(fromCard.ethBalance || '0');
            if (ethBalance < totalDebit) {
              throw new Error(
                `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH. –î–æ—Å—Ç—É–ø–Ω–æ: ${ethBalance.toFixed(8)} ETH, ` +
                `—Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount.toFixed(8)} + ${commission.toFixed(8)} –∫–æ–º–∏—Å—Å–∏—è = ${totalDebit.toFixed(8)} ETH`
              );
            }

            // –°–Ω–∏–º–∞–µ–º ETH —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            await this.updateCardEthBalance(fromCard.id, (ethBalance - totalDebit).toFixed(8));
            console.log(`–°–Ω—è—Ç–æ —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${totalDebit.toFixed(8)} ETH`);
          }
        } else {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ñ–∏–∞—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ BTC
          let usdAmount: number;

          // –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if (fromCard.type === 'uah') {
            usdAmount = amount / parseFloat(rates.usdToUah);
          } else {
            usdAmount = amount;
          }

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º USD –≤ BTC –∏–ª–∏ ETH
          if (cryptoType === 'btc') {
            btcToSend = usdAmount / parseFloat(rates.btcToUsd);
            btcCommission = (usdAmount * 0.01) / parseFloat(rates.btcToUsd);
          } else {
            btcToSend = usdAmount / parseFloat(rates.ethToUsd); // –≠—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ ETH, –Ω–æ –º—ã —Ö—Ä–∞–Ω–∏–º –≤ —Ç–æ–π –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            btcCommission = (usdAmount * 0.01) / parseFloat(rates.ethToUsd);
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ethToSend –≤ BTC —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –¥–ª—è —É—á–µ—Ç–∞
            btcToSend = btcToSend * (parseFloat(rates.ethToUsd) / parseFloat(rates.btcToUsd));
            btcCommission = btcCommission * (parseFloat(rates.ethToUsd) / parseFloat(rates.btcToUsd));
          }

          const fiatBalance = parseFloat(fromCard.balance);
          if (fiatBalance < totalDebit) {
            throw new Error(
              `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${fiatBalance.toFixed(2)} ${fromCard.type.toUpperCase()}, ` +
              `—Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount.toFixed(2)} + ${commission.toFixed(2)} –∫–æ–º–∏—Å—Å–∏—è = ${totalDebit.toFixed(2)} ${fromCard.type.toUpperCase()}`
            );
          }

          // –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å —Ñ–∏–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
          await this.updateCardBalance(fromCard.id, (fiatBalance - totalDebit).toFixed(2));
          console.log(`–°–Ω—è—Ç–æ —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${totalDebit.toFixed(2)} ${fromCard.type.toUpperCase()}`);
        }

        let transactionMode: 'internal' | 'blockchain' | 'simulated' = 'blockchain';
        let txId: string = 'simulated_tx_' + Date.now();

        // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ (–º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ)
        if (toCard) {
          transactionMode = 'internal';
          console.log(`üè¶ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É ${toCard.id}`);

          // –ó–∞—á–∏—Å–ª—è–µ–º –∫—Ä–∏–ø—Ç—É –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞—á–∏—Å–ª—è–µ–º —Ñ–∏–∞—Ç
          if (toCard.type === 'crypto') {
            if (cryptoType === 'btc') {
              const toBtcBalance = parseFloat(toCard.btcBalance || '0');
              await this.updateCardBtcBalance(toCard.id, (toBtcBalance + btcToSend).toFixed(8));
              console.log(`–ó–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç—É ${toCard.id}: ${btcToSend.toFixed(8)} BTC`);
            } else {
              // –î–ª—è ETH –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ BTC –≤ ETH
              const ethToSend = fromCard.type === 'crypto' 
                ? amount 
                : btcToSend * (parseFloat(rates.btcToUsd) / parseFloat(rates.ethToUsd));
              
              const toEthBalance = parseFloat(toCard.ethBalance || '0');
              await this.updateCardEthBalance(toCard.id, (toEthBalance + ethToSend).toFixed(8));
              console.log(`–ó–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç—É ${toCard.id}: ${ethToSend.toFixed(8)} ETH`);
            }
          } else {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BTC –≤ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            let convertedAmount: number;
            
            // –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
            const usdAmount = btcToSend * parseFloat(rates.btcToUsd);
            
            // –ó–∞—Ç–µ–º –≤ –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É
            if (toCard.type === 'uah') {
              convertedAmount = usdAmount * parseFloat(rates.usdToUah);
            } else {
              convertedAmount = usdAmount;
            }
            
            const toFiatBalance = parseFloat(toCard.balance);
            await this.updateCardBalance(toCard.id, (toFiatBalance + convertedAmount).toFixed(2));
            console.log(`–ó–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç—É ${toCard.id}: ${convertedAmount.toFixed(2)} ${toCard.type.toUpperCase()}`);
          }
        } else {
          // –í–Ω–µ—à–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞
          if (!validateCryptoAddress(recipientAddress, cryptoType)) {
            throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ${cryptoType.toUpperCase()} –∞–¥—Ä–µ—Å`);
          }
          console.log(`–ê–¥—Ä–µ—Å ${recipientAddress} –≤–∞–ª–∏–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å...`);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 'blockchain'
          const apiStatus = hasBlockchainApiKeys();
          
          console.log(`üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π: available=${apiStatus.available}, blockdaemon=${apiStatus.blockdaemon}`);
          console.log(`üîê –ü—Ä–∏—á–∏–Ω–∞ (–µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ): ${apiStatus.reason || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}`);
          
          // –í–ê–ñ–ù–û! –í—Å–µ–≥–¥–∞ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –±–ª–æ–∫—á–µ–π–Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç API –∫–ª—é—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          transactionMode = 'blockchain';
          console.log(`üîê –†–µ–∂–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${transactionMode}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫—Ä–∏–ø—Ç–æ—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω
          let txResult;
          
          try {
            if (cryptoType === 'btc') {
              // –õ–æ–≥–∏–∫–∞ –¥–ª—è Bitcoin —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
              txResult = await sendBitcoinTransaction(
                fromCard.btcAddress || '',  // –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                recipientAddress,           // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                btcToSend                   // –°—É–º–º–∞ –≤ BTC
              );
              console.log(`‚úÖ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: ${txResult.txId} (—Å—Ç–∞—Ç—É—Å: ${txResult.status})`);
              txId = txResult.txId;
              
              // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å btc_tx_ –∏–ª–∏ btc_err_)
              if (!txId.startsWith('btc_tx_') && !txId.startsWith('btc_err_')) {
                // –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –±–ª–æ–∫—á–µ–π–Ω-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                console.log(`üöÄ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω! TxID: ${txId}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å
                setTimeout(async () => {
                  try {
                    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txId}`);
                    const status = await checkTransactionStatus(txId || '', 'btc');
                    if (status.status === 'failed') {
                      console.error(`‚ùå BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: ${txId}`);
                      
                      // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                      const originalBtcBalance = parseFloat(fromCard.btcBalance || '0');
                      await this.updateCardBtcBalance(fromCard.id, originalBtcBalance.toFixed(8));
                      console.log(`‚ôªÔ∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${totalDebit.toFixed(8)} BTC –Ω–∞ –∫–∞—Ä—Ç—É ${fromCard.id}`);
                      
                      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤
                      await this.createTransaction({
                        fromCardId: regulator.id,
                        toCardId: fromCard.id,
                        amount: totalDebit.toString(),
                        convertedAmount: '0',
                        type: 'refund',
                        status: 'completed',
                        description: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: ${amount.toFixed(8)} BTC (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞)`,
                        fromCardNumber: "SYSTEM",
                        toCardNumber: fromCard.number,
                        wallet: null,
                        createdAt: new Date()
                      });
                    } else {
                      console.log(`‚úÖ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${txId} –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (—Å—Ç–∞—Ç—É—Å: ${status.status})`);
                    }
                  } catch (checkError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, checkError);
                  }
                }, 5000);
              }
            } else {
              // –õ–æ–≥–∏–∫–∞ –¥–ª—è Ethereum —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π               
              // –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ETH, –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç–∞, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—É–º–º—É –≤ ETH
              // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ BTC –≤ ETH
              const ethAmount = fromCard.type === 'crypto' 
                ? amount  // –ü—Ä—è–º–∞—è —Å—É–º–º–∞ –≤ ETH
                : btcToSend * (parseFloat(rates.btcToUsd) / parseFloat(rates.ethToUsd)); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ BTC –≤ ETH
              
              txResult = await sendEthereumTransaction(
                fromCard.ethAddress || '',  // –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                recipientAddress,           // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                ethAmount                   // –°—É–º–º–∞ –≤ ETH
              );
              console.log(`‚úÖ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: ${txResult.txId} (—Å—Ç–∞—Ç—É—Å: ${txResult.status})`);
              txId = txResult.txId;
              
              console.log(`üöÄ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω! TxID: ${txId}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å
              setTimeout(async () => {
                try {
                  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txId}`);
                  const status = await checkTransactionStatus(txId || '', 'eth');
                  if (status.status === 'failed') {
                    console.error(`‚ùå ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: ${txId}`);
                    
                    // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    const originalEthBalance = parseFloat(fromCard.ethBalance || '0');
                    await this.updateCardEthBalance(fromCard.id, originalEthBalance.toFixed(8));
                    console.log(`‚ôªÔ∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${totalDebit.toFixed(8)} ETH –Ω–∞ –∫–∞—Ä—Ç—É ${fromCard.id}`);
                    
                    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤
                    await this.createTransaction({
                      fromCardId: regulator.id,
                      toCardId: fromCard.id,
                      amount: totalDebit.toString(),
                      convertedAmount: '0',
                      type: 'refund',
                      status: 'completed',
                      description: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: ${amount.toFixed(8)} ETH (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞)`,
                      fromCardNumber: "SYSTEM",
                      toCardNumber: fromCard.number,
                      wallet: null,
                      createdAt: new Date()
                    }, txDb);
                  } else {
                    console.log(`‚úÖ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${txId} –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (—Å—Ç–∞—Ç—É—Å: ${status.status})`);
                  }
                } catch (checkError) {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, checkError);
                }
              }, 5000);
            }
          } catch (blockchainError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${cryptoType.toUpperCase()} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, blockchainError);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            console.log(`‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏...`);
            transactionMode = 'simulated';
          }
        }

        // –ó–∞—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é —Ä–µ–≥—É–ª—è—Ç–æ—Ä—É
        const regulatorBtcBalance = parseFloat(regulator.regulator_balance || '0');
        await this.updateRegulatorBalance(
          regulator.id,
          (regulatorBtcBalance + btcCommission).toFixed(8)
        );

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∂–∏–º–µ
        const transactionDescription = (() => {
          let baseDescription = '';
          
          if (fromCard.type === 'crypto') {
            baseDescription = `–û—Ç–ø—Ä–∞–≤–∫–∞ ${amount.toFixed(8)} ${cryptoType.toUpperCase()} –Ω–∞ –∞–¥—Ä–µ—Å ${recipientAddress}`;
          } else if (cryptoType === 'btc') {
            baseDescription = `–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ${amount.toFixed(2)} ${fromCard.type.toUpperCase()} ‚Üí ${btcToSend.toFixed(8)} BTC –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å ${recipientAddress}`;
          } else {
            baseDescription = `–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ${amount.toFixed(2)} ${fromCard.type.toUpperCase()} ‚Üí ${(btcToSend * (parseFloat(rates.btcToUsd) / parseFloat(rates.ethToUsd))).toFixed(8)} ETH –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å ${recipientAddress}`;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
          if (transactionMode === 'internal') {
            return baseDescription + " (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥)";
          } else if (transactionMode === 'simulated') {
            return baseDescription + " (–°–ò–ú–£–õ–Ø–¶–ò–Ø - —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã, –Ω–æ –±–ª–æ–∫—á–µ–π–Ω-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)";
          } else {
            return baseDescription + " (–±–ª–æ–∫—á–µ–π–Ω)";
          }
        })();
        
        const transaction = await this.createTransaction({
          fromCardId: fromCard.id,
          toCardId: toCard?.id || null,
          amount: fromCard.type === 'crypto' ? amount.toString() : amount.toString(),
          convertedAmount: (btcToSend).toString(),
          type: 'crypto_transfer',
          status: 'completed',
          description: transactionDescription,
          fromCardNumber: fromCard.number,
          toCardNumber: toCard?.number || recipientAddress,
          wallet: recipientAddress,
          createdAt: new Date()
        }, txDb);

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–æ–º–∏—Å—Å–∏–∏
        await this.createTransaction({
          fromCardId: fromCard.id,
          toCardId: regulator.id,
          amount: fromCard.type === 'crypto' ? commission.toString() : commission.toString(),
          convertedAmount: btcCommission.toString(),
          type: 'commission',
          status: 'completed',
          description: `–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ ${cryptoType.toUpperCase()} ${cryptoType === 'btc' ? 
                        `(${btcCommission.toFixed(8)} BTC)` : 
                        `(${commission.toFixed(8)} ETH ~ ${btcCommission.toFixed(8)} BTC)`}`,
          fromCardNumber: fromCard.number,
          toCardNumber: "REGULATOR",
          wallet: null,
          createdAt: new Date()
        }, txDb);

        return { success: true, transaction };
      } catch (error) {
        console.error("Crypto transfer error:", error);
        throw error;
      }
    }, "Crypto Transfer Operation");
  }

  private async withTransaction<T>(operation: (db: any) => Promise<T>, context: string, maxAttempts = 3): Promise<T> {
    let lastError: Error | undefined;

    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      try {
        if (attempt > 0) {
          console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${attempt + 1}/${maxAttempts}: ${context}`);
        } else {
          console.log(`üîÑ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${context}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ postgres-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (!client || typeof client.begin !== 'function') {
          throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL –∏–ª–∏ –º–µ—Ç–æ–¥ begin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º client.begin() –º–µ—Ç–æ–¥ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ postgres.js
        return await client.begin(async (sqlWithTx) => {
          console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞: ${context}`);
          
          if (!sqlWithTx) {
            throw new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ ${context}`);
          }
          
          try {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Drizzle —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∏ —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã
            const txDb = drizzle(sqlWithTx, { 
              schema: {
                cards,
                exchangeRates,
                transactions,
                users
              }
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ txDb –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω
            if (!txDb) {
              throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Drizzle –≤ ${context}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ
            const schemaKeys = Object.keys(txDb);
            console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${schemaKeys.join(', ')}`);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Drizzle
            const result = await operation(txDb);
            
            console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${context}`);
            return result;
          } catch (innerError: any) {
            console.error(`‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${context}:`, innerError);
            throw innerError; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ –≤–Ω–µ—à–Ω–µ–º –±–ª–æ–∫–µ
          }
        });
      } catch (error: any) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
        const isRetryable = 
          error.code === '40001' || // Serialization failure
          error.code === '40P01' || // Deadlock detected
          error.message?.includes('serializable') ||
          error.message?.includes('deadlock') ||
          error.message?.includes('conflict') ||
          error.message?.includes('duplicate');
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—à–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –∏ —É –Ω–∞—Å –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
        if (isRetryable && attempt < maxAttempts - 1) {
          console.warn(`‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ (${context}), –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxAttempts}:`);
          console.warn(`   - –ö–æ–¥: ${error.code || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
          console.warn(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}`);
          
          // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
          const delay = Math.min(1000 * Math.pow(2, attempt), 10000) + Math.random() * 1000;
          console.warn(`   - –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${Math.round(delay/1000)} —Å–µ–∫—É–Ω–¥...`);
          
          // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          lastError = error;
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–¥–¥–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
        console.error(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (${context}), –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxAttempts}:`);
        console.error(`   - –ö–æ–¥: ${error.code || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.error(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}`);
        console.error(`   - SQL: ${error.sql || '–ù–µ—Ç SQL'}`);
        console.error(`   - Stack: ${error.stack || '–ù–µ—Ç —Å—Ç–µ–∫–∞'}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –∏ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
        lastError = error;
        if (attempt === maxAttempts - 1) {
          console.error(`Transfer error: ${error.stack}`);
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é '${context}' –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    throw lastError || new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${context} –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
  }

  private async withRetry<T>(operation: () => Promise<T>, context: string, maxAttempts = 5): Promise<T> {
    let lastError: Error | undefined;
    const MAX_DELAY = 30000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (30 —Å–µ–∫—É–Ω–¥)
    
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      try {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏, –Ω–æ –Ω–µ –∫–∞–∂–¥—É—é
        if (attempt > 0) {
          console.log(`üîÑ ${context}: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxAttempts}`);
        }
        
        return await operation();
      } catch (error: any) {
        lastError = error as Error;
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        const isTransientError = 
          error.code === 'ECONNRESET' || 
          error.code === 'ETIMEDOUT' || 
          error.code === 'ECONNREFUSED' ||
          error.message.includes('connection') ||
          error.message.includes('timeout') ||
          error.code === '40P01'; // Deadlock detected
          
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ —É –Ω–∞—Å –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
        if (isTransientError && attempt < maxAttempts - 1) {
          const delay = Math.min(Math.pow(2, attempt) * 1000 + Math.random() * 1000, MAX_DELAY);
          console.warn(`‚ö†Ô∏è ${context}: –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${Math.round(delay/1000)}s`, error.message || error);
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }
        
        // –î–ª—è –Ω–µ—É—Å—Ç—Ä–∞–Ω–∏–º—ã—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
        console.error(`‚ùå ${context}: –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ ${attempt + 1} –ø–æ–ø—ã—Ç–æ–∫`, error);
        throw error;
      }
    }
    
    throw lastError || new Error(`${context} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
  }

  async getLatestExchangeRates(): Promise<any | undefined> {
    return this.withRetry(async () => {
      try {
        const [rate] = await db.select().from(exchangeRates).orderBy(sql`${exchangeRates.id} DESC`).limit(1);
        return rate;
      } catch (error) {
        console.error("Error fetching latest exchange rates:", error);
        throw error;
      }
    }, 'Get Latest Exchange Rates');
  }

  async updateExchangeRates(rates: { usdToUah: number; btcToUsd: number; ethToUsd: number }): Promise<any> {
    return this.withRetry(async () => {
      try {
        const [result] = await db.insert(exchangeRates).values({
          usdToUah: rates.usdToUah.toString(),
          btcToUsd: rates.btcToUsd.toString(),
          ethToUsd: rates.ethToUsd.toString(),
          updatedAt: new Date()
        }).returning();
        return result;
      } catch (error) {
        console.error("Error updating exchange rates:", error);
        throw error;
      }
    }, 'Update Exchange Rates');
  }

  async createNFTCollection(userId: number, name: string, description: string): Promise<any> {
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT
    return { id: Date.now(), userId, name, description, createdAt: new Date() };
  }

  async createNFT(data: Omit<any, "id">): Promise<any> {
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è NFT
    return { id: Date.now(), ...data, createdAt: new Date() };
  }

  async getNFTsByUserId(userId: number): Promise<any[]> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return []; 
  }

  async getNFTCollectionsByUserId(userId: number): Promise<any[]> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT
    return [];
  }

  async canGenerateNFT(userId: number): Promise<boolean> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è NFT
    return true;
  }

  async updateUserNFTGeneration(userId: number): Promise<void> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT
  }

  async getTransactionsByCardIds(cardIds: number[]): Promise<Transaction[]> {
    try {
      const cardIdsStr = cardIds.join(',');
      const result = await db.select().from(transactions)
        .where(sql`${transactions.fromCardId} IN (${sql.raw(cardIdsStr)}) OR ${transactions.toCardId} IN (${sql.raw(cardIdsStr)})`)
        .orderBy(sql`${transactions.createdAt} DESC`);
      return result;
    } catch (error) {
      console.error(`Error fetching transactions for card IDs [${cardIds.join(', ')}]:`, error);
      throw error;
    }
  }

  async createDefaultCardsForUser(userId: number): Promise<void> {
    // –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // ...
  }

  async deleteUser(userId: number): Promise<void> {
    // –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // ...
  }
}

export const storage = new DatabaseStorage();

function generateCardNumber(type: 'crypto' | 'usd' | 'uah'): string {
  let prefix;
  switch (type) {
    case 'crypto':
      prefix = '4111';
      break;
    case 'usd':
      prefix = '4112';
      break;
    case 'uah':
      prefix = '4113';
      break;
    default:
      prefix = '4000';
  }
  
  return prefix + Math.floor(Math.random() * 1000000000000).toString().padStart(12, '0');
}