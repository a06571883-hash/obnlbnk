/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –°–æ–¥–µ—Ä–∂–∏—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ BlockDaemon API
 */

import express from 'express';
import axios from 'axios';

const BLOCKDAEMON_API_KEY = process.env.BLOCKDAEMON_API_KEY;

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
 */
export function setupDebugRoutes(app: express.Express) {
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ BlockDaemon API
  app.get('/api/debug/blockchain-status', async (req, res) => {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ BlockDaemon API –∏ –∫–ª—é—á–∞');
      console.log(`üîë API Key —Å—Ç–∞—Ç—É—Å: ${BLOCKDAEMON_API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª–∏–Ω–∞: ' + BLOCKDAEMON_API_KEY.length + ')' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù!'}`);
      
      res.json({
        api_key_status: !!BLOCKDAEMON_API_KEY,
        key_length: BLOCKDAEMON_API_KEY ? BLOCKDAEMON_API_KEY.length : 0,
        environment: process.env.NODE_ENV || 'unknown'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ BlockDaemon API:', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  });

  // –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  app.get('/api/debug/test-eth-transaction', async (req, res) => {
    try {
      console.log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π");
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
      const fromAddress = req.query.from as string || "0x742d35Cc6634C0532925a3b844Bc454e4438f44e";
      const toAddress = req.query.to as string || "0x19dE91Af973F404EDF5B4c093983a7c6E3EC8ccE";
      const amount = parseFloat(req.query.amount as string || "0.001");
      
      console.log(`üîÑ [TEST ETH] –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} ETH —Å ${fromAddress} –Ω–∞ ${toAddress}`);
      console.log(`üîë [TEST ETH] API Key —Å—Ç–∞—Ç—É—Å: ${BLOCKDAEMON_API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª–∏–Ω–∞: ' + BLOCKDAEMON_API_KEY.length + ')' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù!'}`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ETH –≤ Wei –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const valueInWei = BigInt(Math.floor(amount * 1e18)).toString();
      console.log(`üí± [TEST ETH] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${amount} ETH = ${valueInWei} Wei`);
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Universal API —Ñ–æ—Ä–º–∞—Ç
      const transactionData = {
        network_name: "eth", 
        network_type: "mainnet",
        transaction: {
          from: fromAddress,
          to: toAddress,
          value: valueInWei,
          gas_limit: "21000", // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–∞–∑ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          gas_price: "medium" // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        }
      };
      
      console.log(`üì§ [TEST ETH] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ BlockDaemon API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`);
      console.log(JSON.stringify(transactionData, null, 2));
      
      const txURL = `https://svc.blockdaemon.com/universal/v1/eth/mainnet/tx`;
      console.log(`üåê [TEST ETH] URL –∑–∞–ø—Ä–æ—Å–∞: ${txURL}`);
      
      try {
        const txResponse = await axios.post(
          txURL,
          transactionData,
          {
            headers: {
              'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            timeout: 20000 // 20 —Å–µ–∫—É–Ω–¥
          }
        );
        
        console.log(`üì• [TEST ETH] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: ${txResponse.status}`);
        console.log(`üìä [TEST ETH] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, txResponse.data);
        
        const txId = txResponse.data?.transaction_hash || txResponse.data?.txid || txResponse.data?.txhash || txResponse.data?.tx_hash;
        
        if (txId) {
          console.log(`‚úÖ [TEST ETH] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. TxID: ${txId}`);
          res.json({ 
            success: true, 
            message: '–¢–µ—Å—Ç–æ–≤–∞—è ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', 
            txId,
            response: txResponse.data 
          });
        } else {
          console.error(`‚ùå [TEST ETH] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TxID –∏–∑ –æ—Ç–≤–µ—Ç–∞ API:`);
          console.error(JSON.stringify(txResponse.data));
          res.status(500).json({ 
            success: false, 
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 
            error: '–ù–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ API',
            response: txResponse.data
          });
        }
      } catch (error: any) {
        console.error(`‚ùå [TEST ETH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ API:`);
        console.error(`   - –°–æ–æ–±—â–µ–Ω–∏–µ:`, error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        console.error(`   - –°—Ç–∞—Ç—É—Å:`, error.response?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        console.error(`   - –î–∞–Ω–Ω—ã–µ:`, error.response?.data || {});
        
        res.status(500).json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 
          error: error.message,
          errorDetails: {
            status: error.response?.status,
            data: error.response?.data
          }
        });
      }
    } catch (error: any) {
      console.error(`‚ùå [TEST ETH] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
      res.status(500).json({ 
        success: false, 
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 
        error: error.message 
      });
    }
  });

  console.log('‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}