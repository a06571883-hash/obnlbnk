import express, { Request, Response, NextFunction } from "express";
import path from "path";
import fs from "fs";
import { spawn } from "child_process";
import { fileURLToPath } from "url";
import { registerRoutes } from "./routes";
import { db } from "./database/connection";
import { setupGlobalErrorHandlers, logError, errorHandler, notFoundHandler } from "./utils/error-handler";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.NODE_ENV = process.env.NODE_ENV || 'development';

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
setupGlobalErrorHandlers();

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('uncaughtException', (error) => {
  console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê (uncaughtException):', error);
  logError(error);
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å
});

process.on('unhandledRejection', (reason: any, promise) => {
  console.error('üö® –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô PROMISE (unhandledRejection):', reason);
  logError(reason instanceof Error ? reason : new Error(String(reason)));
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–ª–∞–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
});

process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–ª–∞–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
});

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JSON body parser
app.use(express.json({ limit: "128kb" }));
app.use(express.urlencoded({ extended: false, limit: "128kb" }));

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CORS
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Content-Type, Authorization");
  res.header("Access-Control-Allow-Methods", "GET,PUT,POST,DELETE,OPTIONS");
  if (req.method === "OPTIONS") return res.sendStatus(200);
  next();
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
registerRoutes(app);

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(notFoundHandler);
app.use(errorHandler);

// –°—Ç–∞—Ç–∏–∫–∞ —Ñ—Ä–æ–Ω—Ç–∞ (–ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ Vite)
const clientDist = path.join(__dirname, "../client/dist");
app.use(express.static(clientDist));

// SPA fallback –¥–ª—è React Router
app.get("*", (req: Request, res: Response) => {
  res.sendFile(path.join(clientDist, "index.html"));
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel Serverless
export default app;

// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if (process.env.NODE_ENV !== "production") {
  const PORT = process.env.PORT || 5000;
  const HOST = "0.0.0.0";
  
  app.listen(PORT, HOST, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`);
    console.log(`üîß –†–µ–∂–∏–º: ${process.env.NODE_ENV}`);
  }).on('error', (error) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:`, error);
    process.exit(1);
  });
}