/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Replit
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞ –ø–æ—Ä—Ç—É 5000 –∏ –∑–∞–ø—É—Å–∫ NFT —Å–µ—Ä–≤–µ—Ä–∞
 */

import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';
import { createServer } from './server/index';

// –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const NFT_SERVER_SCRIPT = 'start-nft-server.js';
const PORT = 5000;
const HOST = '0.0.0.0';

// –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logInfo(message: string) {
  console.log(`[INFO] ${message}`);
}

function logSuccess(message: string) {
  console.log(`[SUCCESS] ${message}`);
}

function logWarning(message: string) {
  console.log(`[WARNING] ${message}`);
}

function logErr(message: string, error?: any) {
  console.error(`[ERROR] ${message}`);
  if (error) console.error(error);
}

// –ó–∞–ø—É—Å–∫ NFT —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
function startNFTServer() {
  logInfo('–ó–∞–ø—É—Å–∫ NFT —Å–µ—Ä–≤–µ—Ä–∞...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º NFT —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
  const nftServer = spawn('node', [NFT_SERVER_SCRIPT], {
    stdio: 'inherit'
  });
  
  nftServer.on('error', (err) => {
    logErr('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞', err);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ NFT —Å–µ—Ä–≤–µ—Ä (—á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ—Ä—Ç–æ–º)
  setTimeout(() => {
    try {
      if (fs.existsSync('nft-server-port.txt')) {
        const port = fs.readFileSync('nft-server-port.txt', 'utf8').trim();
        logSuccess(`NFT —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      } else {
        logWarning('–§–∞–π–ª —Å –ø–æ—Ä—Ç–æ–º NFT —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      }
    } catch (err) {
      logWarning('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç NFT —Å–µ—Ä–≤–µ—Ä–∞');
    }
  }, 5000);
  
  return nftServer;
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
async function main() {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  process.on('uncaughtException', (error) => {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê (uncaughtException):', error);
    logErr('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', error);
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å
  });

  process.on('unhandledRejection', (reason: any) => {
    console.error('üö® –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô PROMISE (unhandledRejection):', reason);
    logErr('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π promise', 
           reason instanceof Error ? reason.message : String(reason));
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å
  });

  console.log('üåü –ó–∞–ø—É—Å–∫ NFT Marketplace –Ω–∞ Replit');
  
  // 1. –ó–∞–ø—É—Å–∫–∞–µ–º NFT —Å–µ—Ä–≤–µ—Ä
  startNFTServer();
  
  // 2. –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ NFT —Å–µ—Ä–≤–µ—Ä–∞
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  logInfo('–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
  try {
    const server = await createServer({ port: PORT, host: HOST });
    logSuccess(`–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    return server;
  } catch (error) {
    logErr('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞', error instanceof Error ? error.message : String(error));
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—ë
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
  process.exit(1);
});