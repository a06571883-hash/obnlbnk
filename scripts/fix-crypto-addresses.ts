/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ btcAddress –∏ ethAddress –≤ –∫–∞—Ä—Ç–∞—Ö —Å —Ç–∏–ø–æ–º 'crypto' –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ bitcoinjs-lib –∏ ethers.js –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤
 */

import { ethers } from 'ethers';
import { db } from '../server/db.js';
import { cards } from '../shared/schema.js';
import { eq } from 'drizzle-orm';
import { validateCryptoAddress, generateValidAddress } from '../server/utils/crypto.js';
import * as bitcoin from 'bitcoinjs-lib';
import { randomBytes } from 'crypto';

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function fixCryptoAddresses() {
  console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º BIP39, HD-–∫–æ—à–µ–ª—å–∫–∏ –∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç—ã
    const cryptoCards = await db.select().from(cards).where(eq(cards.type, 'crypto'));
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${cryptoCards.length} –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    let updatedCount = 0;
    let alreadyValidCount = 0;
    let errorCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É
    for (const card of cryptoCards) {
      console.log(`\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É #${card.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${card.userId}...`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        const isBtcValid = card.btcAddress ? validateCryptoAddress(card.btcAddress, 'btc') : false;
        const isEthValid = card.ethAddress ? validateCryptoAddress(card.ethAddress, 'eth') : false;

        console.log(`–¢–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞:`);
        console.log(`- BTC: ${card.btcAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} (${isBtcValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);
        console.log(`- ETH: ${card.ethAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} (${isEthValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);

        // –ï—Å–ª–∏ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª–∏–¥–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç—É
        if (isBtcValid && isEthValid) {
          console.log(`‚úÖ –ö–∞—Ä—Ç–∞ #${card.id} —É–∂–µ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          alreadyValidCount++;
          continue;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ utils/crypto.ts
        console.log(`üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞...`);
        const btcAddress = generateValidAddress('btc', card.userId);
        const ethAddress = generateValidAddress('eth', card.userId);

        // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª–∏–¥–Ω—ã
        const isNewBtcValid = validateCryptoAddress(btcAddress, 'btc');
        const isNewEthValid = validateCryptoAddress(ethAddress, 'eth');

        if (!isNewBtcValid || !isNewEthValid) {
          console.error(`‚ùå –û—à–∏–±–∫–∞: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç—ã ${card.id}:`);
          console.error(`- BTC (${isNewBtcValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'}): ${btcAddress}`);
          console.error(`- ETH (${isNewEthValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'}): ${ethAddress}`);
          errorCount++;
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
        await db
          .update(cards)
          .set({
            btcAddress: btcAddress,
            ethAddress: ethAddress
          })
          .where(eq(cards.id, card.id));

        console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞—Ä—Ç—ã #${card.id}:`);
        console.log(`  –°—Ç–∞—Ä—ã–π BTC: ${card.btcAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log(`  –ù–æ–≤—ã–π BTC: ${btcAddress} ‚úì`);
        console.log(`  –°—Ç–∞—Ä—ã–π ETH: ${card.ethAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log(`  –ù–æ–≤—ã–π ETH: ${ethAddress} ‚úì`);
        
        updatedCount++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã ${card.id}:`, error);
        errorCount++;
      }
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} –∫–∞—Ä—Ç`);
    console.log(`‚úì –£–∂–µ –≤–∞–ª–∏–¥–Ω—ã—Ö: ${alreadyValidCount} –∫–∞—Ä—Ç`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç
    const checkCards = await db
      .select({ 
        id: cards.id,
        userId: cards.userId,
        btcAddress: cards.btcAddress,
        ethAddress: cards.ethAddress
      })
      .from(cards)
      .where(eq(cards.type, 'crypto'));
      
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç:");
    checkCards.forEach(card => {
      const isBtcValid = validateCryptoAddress(card.btcAddress || '', 'btc');
      const isEthValid = validateCryptoAddress(card.ethAddress || '', 'eth');
      
      console.log(`\n–ö–∞—Ä—Ç–∞ #${card.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${card.userId}:`);
      console.log(`- BTC: ${card.btcAddress} (${isBtcValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);
      console.log(`- ETH: ${card.ethAddress} (${isEthValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
fixCryptoAddresses()
  .then(() => console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error));