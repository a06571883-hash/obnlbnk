#!/usr/bin/env node

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å ESM –∏ top-level await
 */

import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

function runCommand(command, args, options = {}) {
  return new Promise((resolve, reject) => {
    console.log(`üîß –ó–∞–ø—É—Å–∫: ${command} ${args.join(' ')}`);
    const child = spawn(command, args, {
      stdio: 'inherit',
      cwd: options.cwd || __dirname,
      ...options
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Command failed with exit code ${code}`));
      }
    });
  });
}

async function buildClient() {
  console.log('üì¶ –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏...');
  
  // –ü—Ä–æ–±—É–µ–º —Å–±–æ—Ä–∫—É —á–µ—Ä–µ–∑ esbuild –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è Tailwind
  try {
    await runCommand('npx', ['tailwindcss', '-i', 'client/src/index.css', '-o', 'client/dist/styles.css', '--minify'], {
      cwd: __dirname
    });
    console.log('‚úÖ CSS —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.log('‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å Tailwind, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ CSS...');
  }

  // –°–±–æ—Ä–∫–∞ JS —á–µ—Ä–µ–∑ esbuild
  try {
    await runCommand('npx', ['esbuild', 'client/src/main.tsx', '--bundle', '--outfile=dist/public/main.js', '--format=esm', '--platform=browser', '--jsx=automatic'], {
      cwd: __dirname
    });
    console.log('‚úÖ JavaScript —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.log('‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å JavaScript —Å–±–æ—Ä–∫–æ–π');
    throw error;
  }
}

async function buildServer() {
  console.log('üîß –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏...');
  
  try {
    await runCommand('npx', ['esbuild', 'server/index.ts', '--platform=node', '--packages=external', '--bundle', '--format=esm', '--outdir=dist'], {
      cwd: __dirname
    });
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.log('‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–±–æ—Ä–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞');
    throw error;
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å–±–æ—Ä–∫—É...');
    
    await buildClient();
    await buildServer();
    
    console.log('üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:', error.message);
    process.exit(1);
  }
}

main();