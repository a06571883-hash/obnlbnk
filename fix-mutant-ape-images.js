/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç, —á—Ç–æ –≤—Å–µ NFT —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π Mutant Ape –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
 */
import pg from 'pg';
const { Pool } = pg;
import fs from 'fs';
import path from 'path';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

async function main() {
  console.log('üß© –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ Mutant Ape
    const directories = [
      'mutant_ape_nft',
      'mutant_ape_official'
    ];

    const availableImages = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    for (const dir of directories) {
      const dirPath = path.join(process.cwd(), dir);
      
      if (fs.existsSync(dirPath)) {
        console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dirPath}`);
        
        const files = fs.readdirSync(dirPath)
          .filter(file => file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.jpeg') || file.endsWith('.avif'));
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        files.forEach(file => {
          availableImages.push(`/${dir}/${file}`);
        });
      } else {
        console.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${dirPath}`);
      }
    }

    console.log(`üñºÔ∏è –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${availableImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape`);

    if (availableImages.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape...');
    
    const mutantApeNftsResult = await pool.query(`
      SELECT n.id, n.token_id, c.name as collection_name, n.image_path
      FROM nfts n
      JOIN nft_collections c ON n.collection_id = c.id
      WHERE c.name LIKE '%Mutant%'
    `);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${mutantApeNftsResult.rows.length} NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape`);

    if (mutantApeNftsResult.rows.length === 0) {
      console.log('‚ö†Ô∏è NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
      return;
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è –≤—Å–µ—Ö NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...');
    
    let updatedCount = 0;
    
    for (const nft of mutantApeNftsResult.rows) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø—É—Ç—å (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å mutant)
      if (!nft.image_path || !nft.image_path.toLowerCase().includes('mutant')) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        const randomIndex = getRandomInt(0, availableImages.length - 1);
        const newImageUrl = availableImages[randomIndex];
        
        console.log(`–û–±–Ω–æ–≤–ª—è–µ–º NFT #${nft.id} (${nft.token_id}): ${nft.image_path || '–Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'} -> ${newImageUrl}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await pool.query(
          'UPDATE nfts SET image_path = $1 WHERE id = $2',
          [newImageUrl, nft.id]
        );
        
        updatedCount++;
      }
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –∏–∑ ${mutantApeNftsResult.rows.length} NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalCheckResult = await pool.query(`
      SELECT n.id, n.token_id, c.name as collection_name, n.image_path
      FROM nfts n
      JOIN nft_collections c ON n.collection_id = c.id
      WHERE c.name LIKE '%Mutant%' AND (n.image_path NOT LIKE '%mutant%' OR n.image_path IS NULL)
    `);
    
    if (finalCheckResult.rows.length > 0) {
      console.log(`‚ö†Ô∏è –í—Å–µ –µ—â–µ –µ—Å—Ç—å ${finalCheckResult.rows.length} NFT —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏:`);
      finalCheckResult.rows.forEach(nft => {
        console.log(`- NFT #${nft.id} (${nft.token_id}): ${nft.image_path || '–Ω–µ—Ç –ø—É—Ç–∏'}`);
      });
    } else {
      console.log('üéâ –í—Å–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await pool.end();
  }
}

main();